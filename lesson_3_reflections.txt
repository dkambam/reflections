When would you want to use a remote repository rather than keeping all your work
local?
  
  In any of the following cases:
  1. Want a remote copy of my content as backup.
  2. When I am collaborating with others on a common project.



Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

	1. Save network bandwidth.
	2. Collaboration can cause frequent conflicts if updating automatically.
	3. Is more natural & simple to ---
		Get what you need. Change it. Update the remote copy.



Describe the differences between forks, clones, and branches. When would you use
one instead of another?

	Forks -- clones on GitHub machines. 
		Include additional mechanism to:
		1. track number of forks for each repo.
		2. link to source repo

	Clone -- copy of a repository

	Branch -- is a label to a commit.

	I would use forks when:
	1. I don't have permissions to change the original repo.
	2. I'd like to make modifications to a repo but leave the original repo 
	   intact. 
	3. When I want to indicate my code builds on a different repo and link to 
	   it.


	I would use clones when I'd like to make local copies of my repo. 
	either from remote or local repo. as source.


	I would use branch when I would like to start a new feature / experiment 
	with the state of the code.


What is the benefit of having a copy of the last known state of the remote 
stored locally?

	Work offline. Enables merge with any updates in remote.




How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

	I would collaborate by emailing raw code. It would be harder to track 
	changes and if there were more than 2-3 collaborators. Especially,
	if the number of changes / collaborators was big. 

	It would be even more diofficult if they were all working on projects 
	concurrently simultaneously. 

	It would be easier for managing very small changes as the comments in email 
	would suffice.



When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

	Any risky or expertimental change would be done in a seperate branch. 
	Developing a new feature would also be better suited in a new branch.
	This reduces the risk of breaking existing code. 

	Developing in a new branch could result in potential merge conflicts at a 
	later stage.

